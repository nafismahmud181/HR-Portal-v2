rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }
    
    // Helper function to check if user is member of an organization
    function isOrgMember(orgId) {
      return isSignedIn() && exists(/databases/$(database)/documents/organizations/$(orgId)/users/$(request.auth.uid));
    }
    
    // Helper function to check if user is admin of an organization
    function isOrgAdmin(orgId) {
      return isSignedIn() && 
        get(/databases/$(database)/documents/organizations/$(orgId)/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is organization creator (fallback for admin access)
    function isOrgCreator(orgId) {
      return isSignedIn() && 
        get(/databases/$(database)/documents/organizations/$(orgId)).data.createdBy == request.auth.uid;
    }

    // Users - allow users to manage their own documents
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Organizations - proper isolation between organizations
    match /organizations/{orgId} {
      // Allow read if user is authenticated and is a member of THIS organization
      // Also allow if user.uid matches orgId (for initial setup)
      allow read: if isOrgMember(orgId) || (isSignedIn() && resource.data.createdBy == request.auth.uid) || (isSignedIn() && request.auth.uid == orgId);
      
      // Allow create if user is authenticated (for new organizations)
      allow create: if isSignedIn();
      
      // Allow update/delete if user is the creator or admin of THIS organization
      // Also allow if user.uid matches orgId (for initial setup)
      allow update, delete: if isSignedIn() && (
        resource.data.createdBy == request.auth.uid || 
        isOrgAdmin(orgId) || 
        request.auth.uid == orgId
      );

      // Organization users subcollection
      match /users/{userId} {
        // Allow users to read their own user document
        allow read: if isOwner(userId);
        // Allow admins to read all user documents in THEIR organization
        allow read: if isOrgAdmin(orgId);
        // Allow any authenticated user to create their own user document (for invite flow)
        allow create: if isSignedIn() && userId == request.auth.uid;
        // Allow admins to update/delete user documents in THEIR organization
        allow update, delete: if isOrgAdmin(orgId);
      }

      // Invites subcollection
      match /invites/{email} {
        // Allow admins to manage invites in THEIR organization
        allow create, delete: if isOrgAdmin(orgId);
        // Allow admins and invitees to read invites
        allow read: if isOrgAdmin(orgId) || (isSignedIn() && request.auth.token.email == email);
        // Allow updates for invite acceptance
        allow update: if isOrgAdmin(orgId) || (isSignedIn() && request.auth.token.email == email);
      }

      // Employees subcollection - only accessible within the organization      
      match /employees/{employeeId} {
        // Allow employees to read their own record, admins, and org creators to read all employees
        allow read: if isOrgAdmin(orgId) || isOrgCreator(orgId) || (isSignedIn() && request.auth.uid == employeeId);
        // Allow any authenticated user to create their own employee record (for invite flow)                                                                   
        allow create: if isSignedIn() && request.auth.uid == employeeId;        
        // Allow employees to update their own record (for onboarding), admins, and org creators to update any
        allow update: if isOrgAdmin(orgId) || isOrgCreator(orgId) || (isSignedIn() && request.auth.uid == employeeId);
        // Only admins and org creators can delete employee records
        allow delete: if isOrgAdmin(orgId) || isOrgCreator(orgId);
      }

      // Departments subcollection - only accessible within the organization
      match /departments/{departmentId} {
        allow read: if isOrgMember(orgId) || isOrgCreator(orgId);
        allow create, update, delete: if isOrgAdmin(orgId) || isOrgCreator(orgId);
      }

      // Roles subcollection - only accessible within the organization
      match /roles/{roleId} {
        allow read: if isOrgMember(orgId) || isOrgCreator(orgId);
        allow create, update, delete: if isOrgAdmin(orgId) || isOrgCreator(orgId);
      }

      // Leave Requests - only accessible within the organization
      match /leaveRequests/{requestId} {
        allow read: if isOrgMember(orgId) || isOrgCreator(orgId);
        allow create: if isOrgMember(orgId) && request.resource.data.userId == request.auth.uid;
        allow update: if isOrgAdmin(orgId) || isOrgCreator(orgId) || (isOrgMember(orgId) && request.auth.uid == resource.data.userId);
        allow delete: if isOrgAdmin(orgId) || isOrgCreator(orgId);
      }

      // Payroll - only accessible within the organization
      match /payrollRuns/{runId} {
        allow read: if isOrgMember(orgId) || isOrgCreator(orgId);
        allow create, update, delete: if isOrgAdmin(orgId) || isOrgCreator(orgId);

        match /items/{employeeId} {
          allow read: if isOrgAdmin(orgId) || isOrgCreator(orgId) || (isOrgMember(orgId) && request.auth.uid == employeeId);
          allow create, update, delete: if isOrgAdmin(orgId) || isOrgCreator(orgId);
        }
      }

      // Change Logs - audit trail for organizational changes
      match /changeLogs/{logId} {
        allow read: if isOrgMember(orgId) || isOrgCreator(orgId);
        allow create, update, delete: if isOrgAdmin(orgId) || isOrgCreator(orgId);
      }

      // Notifications - employee notifications
      match /notifications/{notificationId} {
        allow read: if (isOrgMember(orgId) || isOrgCreator(orgId)) && (
          isOrgAdmin(orgId) || isOrgCreator(orgId) || 
          request.auth.uid == resource.data.employeeId
        );
        allow create, update, delete: if isOrgAdmin(orgId) || isOrgCreator(orgId);
      }

      // Settings subcollection - organization configuration
      match /settings/{settingType} {
        allow read: if isOrgMember(orgId) || isOrgCreator(orgId);
        allow create, update, delete: if isOrgAdmin(orgId) || isOrgCreator(orgId);
      }
    }

    // Collection group access for organization users (for login queries)
    match /{path=**}/users/{userId} {
      allow read: if isOwner(userId) || (isSignedIn() && resource.data.uid == request.auth.uid);
    }

    // Other collections
    match /documents/{docId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    match /uploads/{uploadId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Employee document uploads - for onboarding documents
    match /organizations/{orgId}/employeeUploads/{uploadId} {
      // Allow employees to upload their own documents during onboarding
      allow create: if isSignedIn() && 
        request.resource.data.employeeId == request.auth.uid &&
        isOrgMember(orgId);
      // Allow employees to read their own uploads and admins to read all uploads
      allow read: if isOrgAdmin(orgId) || (
        isSignedIn() && 
        resource.data.employeeId == request.auth.uid &&
        isOrgMember(orgId)
      );
      // Allow employees to update/delete their own uploads and admins to manage all
      allow update, delete: if isOrgAdmin(orgId) || (
        isSignedIn() && 
        resource.data.employeeId == request.auth.uid &&
        isOrgMember(orgId)
      );
    }

    // Default deny for everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
